
.homeContainer {
	display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: radial-gradient(ellipse at bottom, #0d1d31 0%, #0c0d13 100%);
  overflow: hidden;
  position: relative; /* allow absolutely positioned children (forest) to be tied to this initial view */
}

.centeredWelcome {
	flex: 1 1 0;
	display: flex;
	align-items: center;
	justify-content: center;
}

.welcomeText {
  /* Use clamp for responsive scaling: min 1.8rem on very small screens, preferred scaling based on viewport, max 5rem on large screens */
  font-size: clamp(2.25rem, 6vw, 5rem);
	font-weight: 800;
	color: #fff;
	letter-spacing: 0.05em;
	text-shadow: 0 4px 32px rgba(0,0,0,0.3);
	margin: 0;
	user-select: none;
	animation: fadeIn 2s cubic-bezier(.4,0,.2,1);
}

@keyframes fadeIn {
	from { opacity: 0; transform: translateY(40px); }
	to { opacity: 1; transform: none; }
}

/* Starfield Styles */
.stars {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 120%;
  transform: rotate(-45deg);
}

.mobileStars {
  position: fixed;
  top: 0;
  left: 0;
  transform: rotate(-45deg);
}

.star {
  --star-color: white;
  --star-tail-length: 6em;
  --star-tail-height: 2px;
  --star-width: calc(var(--star-tail-length) / 6);
  --fall-duration: 9s;
  --tail-fade-duration: var(--fall-duration);

  position: absolute;
  top: var(--top-offset);
  left: 0;
  width: var(--star-tail-length);
  height: var(--star-tail-height);
  color: var(--star-color);
  background: linear-gradient(45deg, currentColor, transparent);
  border-radius: 50%;
  filter: drop-shadow(0 0 6px currentColor);
  /* Start off-screen to the right using viewport units so travel covers very wide screens */
  transform: translate3d(120vw, 0, 0);
  animation: fall var(--fall-duration) var(--fall-delay) linear infinite,
             tail-fade var(--tail-fade-duration) var(--fall-delay) ease-out infinite;

  &::before,
  &::after {
    position: absolute;
    content: '';
    top: 0;
    left: calc(var(--star-width) / -2);
    width: var(--star-width);
    height: 100%;
    background: linear-gradient(45deg, transparent, currentColor, transparent);
    border-radius: inherit;
    animation: blink 2s linear infinite;
  }

  &::before {
    transform: rotate(45deg);
  }

  &::after {
    transform: rotate(-45deg);
  }

  pointer-events: none;
  will-change: transform, opacity;
}

/* Decorative forest silhouette that sits at the bottom of the initial viewport */
.forest {
  /* Use an <img> to preserve aspect ratio and ensure the full silhouette is always visible.
     The wrapper is positioned at the bottom of the initial view so the image scrolls away
     with the section. While using width: 100% and height: auto to preserve aspect ratio. */
  position: absolute;
  left: -3px;
  right: 0;
  bottom: -4px; /* slight overlap to prevent gap due to anti-aliasing */
  display: flex;
  justify-content: center;
  pointer-events: none;
  z-index: 0; /* keep behind nav (nav is z-index:1) */
}

.forest img {
  width: 100%;
  height: auto;
  object-fit: contain;
  display: block;
}

/* Small info panel that sits just below the initial viewport; revealed when scrolling */
.initialInfo {
  position: absolute;
  left: 0;
  right: 0;
  top: 100%; /* place immediately after the .homeContainer content */
  padding: 3rem 1.5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  background: linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0.02) 50%, rgba(0,0,0,0.06) 100%);
  color: #e6f7ff;
  z-index: 1; /* sit above forest for readability */
  pointer-events: auto;
}

@media screen and (max-width: var(--mobile-screen-width, 768px)) {
  /* On small screens, remove the rotated transform and increase travel distance
     so stars start off-screen and are spread vertically as expected. */
  .stars {
    transform: none;
  }

  .star {
    /* start further off-screen on mobile to account for different layout/rotation */
    --speed-multiplier: 1.25;
    animation: fall calc(var(--fall-duration) * var(--speed-multiplier)) var(--fall-delay) linear infinite,
               tail-fade calc(var(--tail-fade-duration) * var(--speed-multiplier)) var(--fall-delay) ease-out infinite;
  }
}

@keyframes fall {
  /* Move all the way past the left edge using viewport units; keeps motion correct on ultra-wide screens */
  to {
    transform: translate3d(-120vw, 0, 0);
  }
}

@keyframes tail-fade {
  0%, 50% {
    width: var(--star-tail-length);
    opacity: 1;
  }

  70%, 80% {
    width: 0;
    opacity: 0.4;
  }

  100% {
    width: 0;
    opacity: 0;
  }
}

@keyframes blink {
  50% {
    opacity: 0.6;
  }
}

